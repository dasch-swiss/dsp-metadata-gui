{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DSP-METADATA-GUI Metadata Module","text":"<p>The <code>dsp-metadata-gui</code> is a GUI application written in Python for collecting project specific metadata.</p> <p>Its aim is to enable researchers and project managers who deposit research data on the DaSCH Service Platform (DSP), to add metadata about the project and datasets to the DSP repository. By providing metadata, the project will be searchable on the platform, which is an integral part of the FAIR principles.</p> <p>The metadata follows the schema defined by the dsp-ontologies.</p>"},{"location":"#install-and-run","title":"Install and run","text":"<p>The application has only been tested on Python 3.10.</p> <p>Note: There is a number of known potential issues. See the <code>troubleshoot</code> section here.</p> <p>To be able to use Python 3.10, you may want to use a tool such as pyenv to manage your Python versions.</p>"},{"location":"#installation-via-pip","title":"Installation via pip","text":"<p>To install the application, run:</p> <pre><code>pip install dsp-metadata-gui\n</code></pre> <p>Afterwards, the program can be started by running the command <code>dsp-metadata</code> in your terminal of choice.</p>"},{"location":"#installation-from-source","title":"Installation from source","text":"<p>Clone this repo, install all requirements as described below and run <code>make run</code>.</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#collecting-metadata","title":"Collecting Metadata","text":"<p>The application is divided into two windows:</p> <ol> <li> <p>The main window lets you organize a list of projects, for which you can collect metadata. Several actions can be performed with projects, e.g. editing or exporting the project.</p> </li> <li> <p>When editing a project, in the project window, the actual metadata can be added, modified and saved.</p> </li> </ol> <p>To add a project, you will need the project short code, which is assigned to you by the DaSCH Client Services. A project is always associated with a folder on your local machine. If any files should be included with the metadata import, these files must be within that folder. Once all metadata are added and valid, and the overall RDF graph of the metadata set validates against the ontology, the project can be exported for upload to the DSP.</p> <p>All data is locally stored in the file <code>~/DaSCH/config/repos.data</code>. for more detail, see here.</p>"},{"location":"#conversion-to-v2","title":"Conversion to V2","text":"<p>The metadata generated by the application conforms to the first version of the data model for metadata. This corresponds to the data that can currently be viewed in the DaSCH Metadata Browser.</p> <p>The initial data model will eventually be replaced by the model V2 which introduces major improvements. Metadata V2 will eventually be collected directly in the web interface rather than in this python application. In the mean time until the web interface for editing metadata is implemented, this application provides a script to automatically convert V1 <code>.ttl</code> files into V2 <code>.json</code> files.</p> <p>NB: The conversion can not be fully automated, as the model V2 is more rich in information than V1. For convenience, the conversion adds the string <code>XX</code> wherever the output can not be determined with sufficient confidence. Please check those instances manually. The conversion also does some \"guessing\" work, as e.g. the language of literal values or the display text for URLs. If the output can be determined with a sufficient level of confidence, the conversion will not add <code>XX</code>. However it is still advisable to check the entirety of the output for potential errors.</p> <p>V2 JSON metadata can again be converted to V2 RDF metadata, using another script. This should not require any additional data cleaning.</p> <p>The most important changes from V1 to V2 include the following additions:</p> <ul> <li> <p>Support for multi-language literals</p> </li> <li> <p><code>howToCite</code> on project level</p> </li> <li> <p><code>country</code> property for addresses</p> </li> <li> <p>Creation and modification timestamps</p> </li> <li> <p>JSON schema validation</p> </li> </ul> <p>NB: A new button has been added to run the JSON conversions in the GUI without having to export first.</p>"},{"location":"#development","title":"Development","text":""},{"location":"#development-environment","title":"Development Environment","text":""},{"location":"#poetry","title":"Poetry","text":"<p>Ensure you have poetry installed.</p> <p>to install all requirements, run </p> <pre><code>poetry install\n</code></pre> <p>To install packages, use</p> <pre><code>poetry add &lt;package-name&gt;\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>The documentation is created using <code>mkdocs</code> and <code>mkdocstrings</code> with <code>markdown_include.include</code>. To create the documentation, make sure to install all of these, using pip.</p> <p>To serve the documentation locally, run <code>make doc</code>. To deploy the documentation to github pages, run <code>make deploy-doc</code>.</p>"},{"location":"#release","title":"Release","text":"<p>Automated releases can be created using <code>release-please</code>.</p> <p>Automatically publish a new release to PyPI does not work. Run the <code>release</code> GitHub Action manually.</p>"},{"location":"conversion/","title":"Conversion to V2","text":"<p>The metadata generated by the application conforms to the first version of the data model for metadata. This corresponds to the data that can currently be viewed in the DaSCH Metadata Browser.</p> <p>The initial data model will eventually be replaced by the model V2 which introduces major improvements. Metadata V2 will eventually be collected directly in the web interface rather than in this python application. In the mean time until the web interface for editing metadata is implemented, this application provides a script to automatically convert V1 <code>.ttl</code> files into V2 <code>.json</code> files.</p>"},{"location":"conversion/#model-v2","title":"Model V2","text":"<p>The most important changes from V1 to V2 include the following additions:</p> <ul> <li> <p>Support for multi-language literals</p> </li> <li> <p><code>howToCite</code> on project level</p> </li> <li> <p><code>country</code> property for addresses</p> </li> <li> <p>Creation and modification timestamps</p> </li> <li> <p>JSON schema validation</p> </li> </ul> <p>A detailed, formal specification of the model can be found here.</p>"},{"location":"conversion/#using-the-conversion","title":"Using the Conversion","text":"<p>Converting to the V2 data model is a multi step process:</p> <ol> <li>Collect and export the data model with the GUI tool, as previousely.</li> <li>Convert the exportet V1 <code>.ttl</code> data to V2 JSON data.</li> <li>Clean and post-process the JSON data manually.</li> <li>Convert the V2 JSON data to V2 RDF (<code>.jsonld</code> and <code>.ttl</code>) data.</li> </ol>"},{"location":"conversion/#convert-v1-rdf-to-v2-json","title":"Convert V1 RDF to V2 JSON","text":"<p>In the menu bar, click <code>Options &gt; Convert RDF to JSON</code>.</p> <p></p> <p>This will open the JSON conversion dialog.</p> <p></p> <p>Here you need to specify:</p> <ol> <li>Which files to convert.</li> <li>Where to save the converted files.</li> </ol> <p>To select the files that should be converted, you have three options:</p> <ul> <li><code>Single File</code>: Select a single Turtle file.</li> <li><code>Multiple Files</code>: Select multiple Turtle files; use shift-click or control-click to select multiple files.</li> <li><code>Directory (Bulk Transform)</code>: Select a folder and it will transform all Turtle files within this folder.</li> </ul> <p>As output simply select a folder. The selected input file(s) will be converted and saved to this folder. The output files will retain the input file's name but the ending will be replaced from <code>.ttl</code> to <code>.json</code>. If the output folder already contains a file whith such a name, it will get overwritten. It is therefore advisable to select an empty folder.</p> <p>Finally, hit the <code>Convert</code> button at the very bottom of the dialog. This button is greyed out as long as either the input or the output is missing. As soon as input and output are specified, the button gets enabled.</p> <p>The conversion may take a while (especially if multiple files are being converted), the dialog will not be clickable during this time. Once it's done the output folder should open up, and the conversion dialog can be closed. The process should not take more than a minute per file. On the console you should get minimal indication of the progress.</p> <p>NB: The conversion requires a local <code>.ttl</code> file. It is therefore necessary to export the data after entering it, before it can be converted.</p> <p>NB: Be sure to remember to review the data after the conversion. It will require manual post-processing, as described below.</p>"},{"location":"conversion/#manual-post-processing","title":"Manual Post-Processing","text":"<p>The conversion can not be fully automated, as the model V2 is more rich in information than V1.</p> <p>For convenience, the conversion adds the string <code>XX</code> wherever the output can not be determined with sufficient confidence. Please check those instances manually. Simply open the output file in a text editor and search for <code>XX</code>.</p> <p>The conversion also does some \"guessing\" work, as e.g. the language of literal values or the display text for URLs. If the output can be determined with a sufficient level of confidence, the conversion will not add <code>XX</code>. However it is still advisable to check the entirety of the output for potential errors.</p> <p>As the model V2 supports JSON schema validation, it is also advisable to open the output file in a text editor that supports JSON schema validation. (E.g. Visual Studio Code which automatically validates JSON files that have a schema specified.) This will highlight potential issues with the data.  </p> <p>Note: The schema validates URLs as URIs. It will therefore consider URLs without scheme as invalid, i.e. <code>meta.dasch.swiss</code> will be highlighted as invalid, whereas <code>https://meta.dasch.swiss</code> will be valid. These warnings can safely be ignored, or the schemes can be added to get rid of the warnings.</p>"},{"location":"conversion/#convert-v2-json-to-v2-rdf","title":"Convert V2 JSON to V2 RDF","text":"<p>Once the JSON data is fully cleaned, it can be converted to V2 RDF (both turtle and JSON-LD) using another conversion tool in the GUI:</p> <p>In the menu bar, click <code>Options &gt; Convert JSON to RDF</code>.</p> <p></p> <p>This will open the RDF conversion dialog.</p> <p></p> <p>Similarly to the first conversion, you need to specify input and output, and then hit <code>convert</code>.</p>"},{"location":"dataset/","title":"Dataset","text":"<p>This class represents one (of potentially many) dataset of the project.</p>"},{"location":"dataset/#is-part-of","title":"Is Part of","text":"<p>Links the dataset to its project. Note: This property is read-only and can not be changed.</p>"},{"location":"dataset/#title","title":"Title","text":"<p>The title of the dataset. (Mandatory.)</p>"},{"location":"dataset/#abstract","title":"Abstract","text":"<p>Abstract of the dataset. Can be the abstract text itself or a link to an abstract online. (Mandatory. Can have multiple values.)</p>"},{"location":"dataset/#language","title":"Language","text":"<p>The language the dataset is primarily written in. (Mandatory. Can have multiple values.)</p>"},{"location":"dataset/#type-of-data","title":"Type of Data","text":"<p>The type of data the dataset is primarily made up of. Select values from the drop-down. The available options are: XML, Text, Image, Movie, Audio. (Mandatory. Can have multiple values.)</p>"},{"location":"dataset/#qualified-attribution","title":"Qualified Attribution","text":"<p>Attribution of contributions to the dataset by people or organizations. A qualified attribution consists of a sub-property <code>agent</code> denoting the person or organization (select from the drop-down), and a sub-property <code>role</code>, denoting the role the person/organization had, within the project. (Mandatory. Can have multiple values.)</p>"},{"location":"dataset/#license","title":"License","text":"<p>The license terms under which the dataset is published. Note: A URL to the license definition is expected. (Mandatory. Can have multiple values.)</p>"},{"location":"dataset/#how-to-cite","title":"How to Cite","text":"<p>Recommendation, how the dataset should be cited. (Mandatory.)</p>"},{"location":"dataset/#conditions-of-access","title":"Conditions of Access","text":"<p>Access conditions of the dataset. Should normally be open access. A temporary embargo could be mentioned here too. (Mandatory.)</p>"},{"location":"dataset/#status","title":"Status","text":"<p>The status of the dataset within a project life cycle. Select values from the drop-down. The available options are: In planning, Ongoing, On hold, Finished. (Mandatory.)</p>"},{"location":"dataset/#alternative-url","title":"Alternative URL","text":"<p>Alternative URL of the dataset. This could for example include a link to a project specific website. (Optional.)</p>"},{"location":"dataset/#documentation","title":"Documentation","text":"<p>Documentation of the dataset. This can either be a documentation text or a link to an online documentation. (Optional. Can have multiple values.)</p>"},{"location":"dataset/#date-published","title":"Date Published","text":"<p>The publication date of the dataset. Use the date picker to select a date. (Optional.)</p>"},{"location":"dataset/#date-created","title":"Date Created","text":"<p>The date when the dataset was first collected. Use the date picker to select a date. (Optional.)</p>"},{"location":"dataset/#date-modified","title":"Date Modified","text":"<p>The date when the dataset was last changed. Use the date picker to select a date. (Optional.)</p>"},{"location":"dataset/#distribution","title":"Distribution","text":"<p>Link to a download of the entire dataset.  (Optional.)</p>"},{"location":"grant/","title":"Grant","text":"<p>This class represents financing granted to the project by a person or organization.</p>"},{"location":"grant/#funder","title":"Funder","text":"<p>The funding person or organization. Select a person or organization from the drop-down menu. (Mandatory. Can have multiple values.)</p>"},{"location":"grant/#name","title":"Name","text":"<p>The name of the grant, if any (e.g. \"Ambizione\", \"Eccellenza\", etc.). (Optional.)</p>"},{"location":"grant/#number","title":"Number","text":"<p>The number associated with the grant. (Optional.)</p>"},{"location":"grant/#url","title":"URL","text":"<p>The URL of the grant. (Optional.)</p>"},{"location":"list_view/","title":"Project Organization","text":"<p>The project organization window consists of three sections:</p> <ul> <li>On the top, there is a list of all projects.   If there are none, you will need to add one; otherwise the buttons are mostly greyed out.</li> <li>On the bottom left, there is a preview of the RDF representation of the selected project.</li> <li>On the bottom right, there are the buttons for the available actions to perform.   All buttons, except adding a new project, require a project to be selected. If not, they will be greyed out.</li> </ul> <p></p>"},{"location":"list_view/#graphical-user-interface","title":"Graphical User Interface","text":""},{"location":"list_view/#project-list","title":"Project List","text":"<p>The project list shows the available projects.</p> <p>For each projects, it displays the associated folder, the project name, shortcode and a list of associated files.  It also gives indication of the status, i.e. validity of the project and the number of missing properties.</p>"},{"location":"list_view/#rdf-preview","title":"RDF Preview","text":"<p>The RDF preview displays a turtle serialization of the metadata of the selected project.</p>"},{"location":"list_view/#actions","title":"Actions","text":"<p>The following actions can be performed:</p> <p></p> <ul> <li>Add new Project   Adds a new project to the list.   To be able to add a project, you need to know its shortcode as well as associate a folder on your local file system with it. For details, see below.</li> <li>Import Project   Lets you import a project from binaries (see \"Zip and Export\") and add it to the list.</li> <li>Remove selected Project   Removes the selected project from the list.   Note: This can not be undone.</li> <li>Edit selected Project   Opens the form for collecting metadata.</li> <li>Validate selected Project   Validates the selected project against the ontology.</li> <li>Export selected Project as RDF   Exports the selected project metadata as Turtle, RDF/XML and JSON-LD.   The files are stored in the folder associated with the project.</li> <li>Zip and Export Project   This action creates a Zip archive, containing all the files associated with the project, RDF serializations of the metadata, and a binary serialization of the project for reimport into this tool.</li> </ul>"},{"location":"list_view/#concepts","title":"Concepts","text":""},{"location":"list_view/#project-shortcode","title":"Project Shortcode","text":"<p>The project shortcode is a four digit hexadecimal number that is assigned by the DaSCH to each project on the DSP.</p> <p>To be able to add a project to the list, you need to enter the shortcode.</p> <p></p> <p>The shortcode can not be altered after the project has been created.  Be sure to have the shortcode ready at hand when you want to add a new project.  If you do not have a a shortcode for your project yet, please get in touch with the DaSCH Client Services.</p>"},{"location":"list_view/#folder-and-files","title":"Folder and Files","text":""},{"location":"list_view/#folder","title":"Folder","text":"<p>When adding a new project, after entering the project shortcode, you need to select a folder of your local file system, that is associated with the project.</p> <p>Note: Do not move or remove that folder, it might cause you to lose all data related to this project - or in the worst case, cause the tool to crash.</p> <p>This folder must hold all files you want to associate with the project. It is also where the RDF is exported to.</p>"},{"location":"list_view/#files","title":"Files","text":"<p>If you not only want to submit project metadata, but also primary project data with it (e.g. like this is done on Zenodo), this data should come in the simplest possible form. Ideally, all data should be combined into one ZIP archive.</p> <p>When creating a project and associating the folder with it, all files in this folder are automatically associated with the project. However, files can be added or removed at any time in the project base data, provided that the files are in the folder. </p>"},{"location":"list_view/#local-data-storage","title":"Local Data Storage","text":"<p>The metadata tool stores all data (except data you export) as binary data in the file <code>~/DaSCH/config/repos.data</code>.</p> <p>If you want to back up your working data, be sure to make backups of this file as well as all folders you associated with projects.</p> <p>Deleting this file will remove all projects and cause irreversible loss of all data you have entered.</p> <p>When the tool has a major update with breaking changes to the API, you will need to delete this file manually.</p>"},{"location":"organization/","title":"Organization","text":"<p>This class represents an organization or legal body.</p>"},{"location":"organization/#legal-name","title":"Legal Name","text":"<p>The name of the organization. (Mandatory. Can have multiple values.)</p>"},{"location":"organization/#e-mail","title":"E-Mail","text":"<p>The contact e-mail address of the organization. (Optional.)</p>"},{"location":"organization/#url","title":"URL","text":"<p>The website of the organization. (Optional.)</p>"},{"location":"organization/#address","title":"Address","text":"<p>The postal address of the organization. (Optional.)</p> <p>Consists of three sub-properties: Street, postal code, locality.</p>"},{"location":"person/","title":"Person","text":"<p>This class represents a person.</p>"},{"location":"person/#family-name","title":"Family Name","text":"<p>The family name of the person. (Mandatory.) Note: One value only. If multiple are required, use semicolon to separate them.</p>"},{"location":"person/#given-name","title":"Given Name","text":"<p>The given name of the person. (Mandatory. Can have multiple values.)</p>"},{"location":"person/#member-of","title":"Member of","text":"<p>The affiliation of the person. Select an organization from the drop-down menu. (Mandatory. Can have multiple values.)</p>"},{"location":"person/#job-title","title":"Job Title","text":"<p>The job title or position of the person in the context of the project. (Mandatory. Can have multiple values.)</p>"},{"location":"person/#e-mail","title":"E-Mail","text":"<p>The contact e-mail address of the person. (Optional.)</p>"},{"location":"person/#alternative-url","title":"Alternative URL","text":"<p>Entry in an authority file. (e.g. ORCID, VIAF, GND) (Optional. Can have multiple values.)</p>"},{"location":"person/#address","title":"Address","text":"<p>The postal address of the person. (Optional.)</p> <p>Consists of three sub-properties: Street, postal code, locality.</p>"},{"location":"project/","title":"Project Tab","text":"<p>This class represents the project itself.</p>"},{"location":"project/#name","title":"Name","text":"<p>The official project name. (Mandatory.)</p>"},{"location":"project/#shortcode","title":"Shortcode","text":"<p>The unique identifier assigned to the project by the DaSCH Client Services. This needs to be entered upon project creation and can not be changed later on. The property is read-only.</p>"},{"location":"project/#url","title":"URL","text":"<p>The project website. This should always be the DSP ARK URL (which will be provided by the DaSCH Client Services). Optionally, a second URL can be entered, e.g. pointing to a project-specific website. (Mandatory. Second value optional.)</p>"},{"location":"project/#description","title":"Description","text":"<p>Description of the project. This should be the description text rather than a URL. (Mandatory.)</p>"},{"location":"project/#keywords","title":"Keywords","text":"<p>Keywords/Tags describing the project. (Mandatory. Can have multiple values.)</p>"},{"location":"project/#discipline","title":"Discipline","text":"<p>The scholarly discipline of the project. This should either be a link to the UNESCO nomenclature for fields of science and technology or a term from the list provided by the SNSF. (Mandatory. Can have multiple values.)</p>"},{"location":"project/#start-date","title":"Start Date","text":"<p>Start date of the project. Use the date picker to select a date. (Mandatory.)</p>"},{"location":"project/#end-date","title":"End Date","text":"<p>End date of the project. Use the date picker to select a date. (Optional.)</p>"},{"location":"project/#temporal-coverage","title":"Temporal Coverage","text":"<p>The temporal coverage of the project. Should be a link to a term in Periodo or Chronontology. (Mandatory. Can have multiple values.)</p>"},{"location":"project/#spatial-coverage","title":"Spatial Coverage","text":"<p>The spatial coverage of the project. Should be a link to a term in Geonames or Pleiades. (Mandatory. Can have multiple values.)</p>"},{"location":"project/#funder","title":"Funder","text":"<p>The funder of the project. Select a person or organization from the drop-down. (Mandatory. Can have multiple values.)</p>"},{"location":"project/#grant","title":"Grant","text":"<p>The grant by which the project is financed. Select a grant from the drop-down. (Optional. Can have multiple values.)</p>"},{"location":"project/#alternate-name","title":"Alternate Name","text":"<p>Alternative name of the project, e.g. if the project is typically referred to by a short name. (Optional. Can have multiple values.)</p>"},{"location":"project/#data-management-plan","title":"Data Management Plan","text":"<p>Data management plan of the project. Use the checkbox to indicate if there is a data management plan at all. Add a link to the data management plan, if available online. (Optional.)</p>"},{"location":"project/#publications","title":"Publications","text":"<p>Publications published during the lifetime of the project. (Optional.)</p>"},{"location":"project/#contact-point","title":"Contact Point","text":"<p>Designated contact point for the project. Use the drop-down to select a person or organization. (Optional.)</p>"},{"location":"tab_view/","title":"Entering Metadata","text":"<p>When you select to edit a project, a new window opens. This window allows you to enter and modify the project metadata. It is divided in a number of tabs.</p> <p>At any given time, you can save the data you entered and close the window with or without saving, using the buttons on the bottom of the window.</p>"},{"location":"tab_view/#base-data-tab","title":"Base Data Tab","text":"<p>The first tab shows the project's base data. Here, you can associate or dissociate files with the project. (For details, see here.)</p> <p></p>"},{"location":"tab_view/#metadata-tabs","title":"Metadata Tabs","text":"<p>All other tabs each correspond to a top level class in the metadata, and share the same general layout.</p> <p></p> <p>There is a row for each property. The value(s) of the property can be edited in the middle. Furthermore, there are two buttons to show further information on the property: The button labeled \"?\" explains what is meant by the property, i.e. what kind of value is expected. If available, there is also a simple, imaginary example. The button labeled either \"Mandatory\" or \"Optional\" gives validation information on the current value. The colors indicate, wether or not the value is valid (green = valid; red = invalid; gray = no value entered for optional property). For some more information why the value is (in)valid, click the button.</p>"},{"location":"tab_view/#classestabs","title":"Classes/Tabs","text":"<p>The metadata consist of instances of classes. Each complex class has a corresponding tab in the GUI, where instances of the class can be organized and edited.</p> <p>Classes have properties, that can either be literal values (e.g. strings, URLs, etc.) or references to instances of other classes (e.g. a dataset being belonging to a project).</p>"},{"location":"tab_view/#organization","title":"Organization","text":"<p>There can be multiple organizations.</p> <p>This class represents an organization that contributed to the project.</p>"},{"location":"tab_view/#person","title":"Person","text":"<p>There can be multiple persons.</p> <p>This class represents a person that contributed to the project.</p>"},{"location":"tab_view/#grant","title":"Grant","text":"<p>There can be multiple grants.</p> <p>This class represents a financial grant that was granted to the project.</p>"},{"location":"tab_view/#dataset","title":"Dataset","text":"<p>There can be multiple datasets.</p> <p>A project hosted on the DSP must have at least one dataset.</p>"},{"location":"tab_view/#project","title":"Project","text":"<p>The project is the only class of which there can only be one, in the metadata. The tab therefor does not have the list of multiple instances.</p> <p>This class holds all information that is representative of the entire project.</p>"},{"location":"tab_view/#properties-cardinalities-values","title":"Properties, Cardinalities, Values","text":""},{"location":"tab_view/#multiple-instances-of-a-class","title":"Multiple Instances of a Class","text":"<p>All classes, except the project, can have multiple instances. E.g. there will be multiple people contributing to a project.</p> <p>Where this is the case, the tab shows a list at the very top, representing all instances of the class. Additional instances can be added and existing instances can be removed with the buttons next to it.</p> <p>Once there are multiple instances, select the one you want to work on in the list. You can only edit properties of the instance that is currently selected.</p> <p></p>"},{"location":"tab_view/#cardinalities","title":"Cardinalities","text":"<p>Each property of a class has a defined cardinality, as defined in the ontology.</p> <p>Generally, a property can either be <code>optional</code> or <code>mandatory</code>.</p> <p>Furthermore, a property can either be restricted to occur only once, or it can potentially occur multiple times. (Combined, several cardinalities are possible, e.g. <code>1</code>, <code>0-1</code>, <code>0-n</code>, <code>1-n</code> but also <code>1-2</code> etc.)</p> <p>Except for some cases that should be self-explanatory, the GUI mostly differentiates between properties that can occur maximum one time, and properties that can occur multiple times. Where only one value is expected, there will only be an input field. Where multiple values can occur, there is an input field, a list of all values and buttons to add and remove values to/from the list. Note: A value is only added to the list, once the \"+\" button is pressed or enter is hit. For an example, see the image below: While a dataset can only have one title, it may consist of multiple languages.</p> <p></p>"},{"location":"tab_view/#values","title":"Values","text":"<p>Generally, the value of a property can either be a text-like value (e.g. Text, URLs, etc.), or it can link another object (Dataset, Project, Person, etc.).</p> <p>Text-like values are represented as text fields in the GUI. The value can simply be typed in. Object links are represented as dropdown lists in the GUI. The dropdown shows all objects that can be referenced in this place. The linkable objects can be created and modified in their respective tab.</p> <p>Example: A Project can have either a person or an organization as a point of contact.</p> <p></p>"},{"location":"todo/","title":"Roadmap","text":""},{"location":"todo/#next-major-version","title":"Next Major Version","text":""},{"location":"todo/#programming","title":"Programming","text":""},{"location":"todo/#smaller-features","title":"Smaller Features","text":"<ul> <li> remove all error-catching for backwards-compatibility</li> <li> rework export function: let user decide what they want (file format, where to store, entire zip, ...)</li> <li> check validity before export</li> <li> in attribution, ensure same person can have multiple roles, rather than having multiple attributions with same person</li> <li> add language tag to string properties</li> </ul>"},{"location":"todo/#bigger-features","title":"Bigger Features","text":"<ul> <li> have versioning in pickles(?)</li> <li> try to handle pickles from older versions(?)</li> <li> implement upload to DSP functionality</li> <li> implement download from DSP</li> <li> implement import from RDF functionality</li> <li> regular json support</li> </ul>"},{"location":"todo/#maintenance","title":"Maintenance","text":"<ul> <li> add unit tests</li> <li> improve module granularity</li> <li> rename code folder to <code>src</code> for convention's sake</li> </ul>"},{"location":"todo/#nice-to-have-ideas","title":"Nice to Have / Ideas","text":"<ul> <li> rdf graph visualization</li> <li> Proper Menu</li> <li> Options<ul> <li> Save on Tab-Change</li> </ul> </li> <li> Help</li> </ul>"},{"location":"usage_overview/","title":"Usage Overview","text":""},{"location":"usage_overview/#installation","title":"Installation","text":"<p>Be sure to have Python 3 installed.</p> <p>Note: The application has only been tested on Python 3.10.</p> <p>If you encounter any issues, see the troubleshoot section below.</p> <p>To install the application, run:</p> <pre><code>pip install dsp-metadata-gui\n</code></pre> <p>Or respectively:</p> <pre><code>pip3 install dsp-metadata-gui\n</code></pre>"},{"location":"usage_overview/#run","title":"Run","text":"<p>Once installed, you can start the tool from your terminal:</p> <pre><code>dsp-metadata\n</code></pre>"},{"location":"usage_overview/#collect-metadata","title":"Collect metadata","text":"<p>The application is divided into two main parts: Project Organization and the Form for collecting Metadata.</p> <p>In the Project Organization, you can organize all projects, for which you want to collect metadata. At first, you will need to add a new project. For that you need the project shortcode, which is provided by the DaSCH Client Services. (If you don't have your shortcode yet, get in touch.) After adding at least one project, you can select a project in the list and perform several actions, like editing the data or exporting an RDF serialization of the project metadata.</p> <p>When editing a project the form for collecting metadata opens up. There are multiple tabs, where data can be entered for several classes like:</p> <ul> <li>Organization</li> <li>Person</li> <li>Grant</li> <li>Dataset</li> <li>Project</li> </ul> <p>Note: The order may seem counter intuitive, not starting from the project and dataset. However, following the order of the tabs is recommended, as e.g. person depends on organization, etc.</p>"},{"location":"usage_overview/#troubleshoot","title":"Troubleshoot","text":"<p>There is a number of known issues. In these cases, please try the following workarounds.</p> <ul> <li> <p>There have been issues with <code>conda</code> installations. If this is the case, consider using a virtual environment.</p> </li> <li> <p>In some instances (typically on Mac OS, when python has not been installed with Homebrew), installation works but when running the tool, a SSL error occurs. In that case you can either locate your python installation in <code>Applications &gt; Python 3.10</code> and double-click the file <code>Install Certificates.command</code>. Alternatively, it should work if you install python via Homebrew.</p> </li> <li> <p>On Mac M1 Silicon devices, <code>Pillow</code> may cause issues when installing dsp-metadata-gui with pip. If you run into the   error: \"The headers or library files could not be found for zlib, a required dependency when compiling Pillow from   source.\", install <code>ffmpeg</code> or <code>libjpeg</code> with homebrew (<code>brew install ffmpeg</code> or <code>brew install libjpeg</code>).   Then try to install dsp-metadata-gui again. This fix was found on: GitHub.</p> </li> </ul> <p>If you encounter any further issues, do not hesitate to get in touch or open a GitHub issue.</p>"},{"location":"reference/collectMetadata/","title":"Metadata GUI","text":"<p>NB: Due to a bug in python, which causes <code>mkdocstrings</code> to crash on <code>wxPython</code>, this part of the API documentation needs to be maintained by hand. It's therefor not as thorough as the rest of the API documentation. See the source code for clarifications.</p>"},{"location":"reference/collectMetadata/#the-gui-classes","title":"The GUI Classes","text":"<p>The DSP-Metadata-GUI is managed by a set of classes within the module collectMetadata.py and other classes. In this page we introduce the GUI classes.</p> <p>There are the following classes:</p> <ul> <li>ProjectFrame</li> <li>ProjectPanel</li> <li>TabOne</li> <li>PropertyRow</li> <li>DataTab</li> <li>HelpPopup</li> <li>TabbedWindow</li> </ul>"},{"location":"reference/collectMetadata/#entry-point","title":"Entry Point","text":"<p>:::dspMetadataGUI.collectMetadata:collectMetadata</p>"},{"location":"reference/dataHandling/","title":"dataHandling","text":"<p>::: dspMetadataGUI.util.dataHandling</p>"},{"location":"reference/metaDataSet/","title":"metaDataSet","text":"<p>::: dspMetadataGUI.util.metaDataSet</p>"},{"location":"reference/utils/","title":"Utils","text":"<p>::: dspMetadataGUI.util.utils</p>"}]}